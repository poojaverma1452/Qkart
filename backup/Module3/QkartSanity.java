/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package QKART_SANITY_LOGIN.Module1;

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Set;
// import java.util.Set;
import java.util.concurrent.TimeUnit;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.WindowType;
import org.openqa.selenium.By.ByXPath;
import org.openqa.selenium.remote.BrowserType;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

public class QkartSanity {

    public static String lastGeneratedUserName;


    public static RemoteWebDriver createDriver() throws MalformedURLException {
        // Launch Browser using Zalenium
        final DesiredCapabilities capabilities = new DesiredCapabilities();
        capabilities.setBrowserName(BrowserType.CHROME);
        RemoteWebDriver driver = new RemoteWebDriver(new URL("http://localhost:8082/wd/hub"), capabilities);

        return driver;
    }

    public static void logStatus(String type, String message, String status) {

        System.out.println(String.format("%s |  %s  |  %s | %s", String.valueOf(java.time.LocalDateTime.now()), type,
                message, status));
    }


    /*
     * Testcase01: Verify the functionality of Login button on the Home page
     */
    public static Boolean TestCase01(RemoteWebDriver driver) throws InterruptedException {
        //Screenshot Test-case:1 Starting Part
        takeScreenshot(driver, "Starting", "TestCase-01");
        Thread.sleep(500);
        Boolean status;
        logStatus("Start TestCase", "Test Case 1: Verify User Registration", "DONE");

        // Visit the Registration page and register a new user
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);
        Thread.sleep(10000);
        if (!status) {
            logStatus("TestCase 1", "Test Case Pass. User Registration Pass", "PASS");
            logStatus("End TestCase", "Test Case 1: Verify user Registration : ", status ? "PASS" : "FAIL");
            takeScreenshot(driver, "RegisterPageFailing", "TestCase-01");
            // Return False as the test case Fails
            return false;
        } else {
            logStatus("TestCase 1", "Test Case Pass. User Registration Pass", "PASS");
        }

        // Save the last generated username
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // Visit the login page and login with the previuosly registered user
        Login login = new Login(driver);
        login.navigateToLoginPage();
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        logStatus("Test Step", "User Perform Login: ", status ? "PASS" : "FAIL");
        if (!status) {
            logStatus("End TestCase", "Test Case 1: Verify user Registration : ", status ? "PASS" : "FAIL");
            return false;
        }

        // Visit the home page and log out the logged in user
        Home home = new Home(driver);
        status = home.PerformLogout();
        logStatus("End TestCase", "Test Case 1: Verify user Registration : ", status ? "PASS" : "FAIL");
        takeScreenshot(driver, "Ending", "TestCase-01");
        Thread.sleep(500);
        return status;
    }

    /*
     * Verify that an existing user is not allowed to re-register on QKart
     */
    public static Boolean TestCase02(RemoteWebDriver driver) throws InterruptedException {
        takeScreenshot(driver, "Starting", "TestCase-02");
        Thread.sleep(500);
        Boolean status;
        logStatus("Start Testcase", "Test Case 2: Verify User Registration with an existing username ", "DONE");

        // Visit the Registration page and register a new user
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);
        logStatus("Test Step", "User Registration : ", status ? "PASS" : "FAIL");
        if (!status) {
            logStatus("End TestCase", "Test Case 2: Verify user Registration : ", status ? "PASS" : "FAIL");
            takeScreenshot(driver, "RegisterPage", "TestCase-02");
            return false;

        }

        // Save the last generated username
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // Visit the Registration page and try to register using the previously
        // registered user's credentials
        registration.navigateToRegisterPage();
        status = registration.registerUser(lastGeneratedUserName, "abc@123", false);

        // If status is true, then registration succeeded, else registration has
        // failed. In this case registration failure means Success
        logStatus("End TestCase", "Test Case 2: Verify user Registration : ", status ? "FAIL" : "PASS");
        takeScreenshot(driver, "Ending", "TestCase-02");
        Thread.sleep(500);
        return !status;
    }

    /*
     * Verify the functinality of the search text box
     */
    public static Boolean TestCase03(RemoteWebDriver driver) throws InterruptedException {
        takeScreenshot(driver, "Starting", "TestCase-03");
        // Thread.sleep(500);
        logStatus("TestCase 3", "Start test case : Verify functionality of search box ", "DONE");
        boolean status;

        // Visit the home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        // Search for the "yonex" product
        status = homePage.searchForProduct("yonex");
        if (!status) {
            logStatus("TestCase 3", "Test Case Failure. Unable to search for given product", "FAIL");
            takeScreenshot(driver, "HomePage", "TestCase-03");
            return false;
        }
        

        // // Fetch the search results
        Thread.sleep(500);
        List<WebElement> searchResults = homePage.getSearchResults();
        System.out.println(searchResults.size());

        // Verify the search results are available
        
        if (searchResults.size() == 0) {
            logStatus("TestCase 3", "Test Case Failure. There were no results for the given search string", "FAIL");
            takeScreenshot(driver, "HomePage", "TestCase-03");
            return false;
        }
        Thread.sleep(500);
        for (WebElement webElement : searchResults) {
            // Create a SearchResult object from the parent element
            SearchResult resultelement = new SearchResult(webElement);

            // Verify that all results contain the searched text
            String elementText = resultelement.getTitleofResult();
            System.out.println(elementText);
            Thread.sleep(500);
            if (!elementText.contains("YONEX")) {
                logStatus("TestCase 3", "Test Case Failure. Test Results contains un-expected values: " + elementText,
                        "FAIL");
                takeScreenshot(driver, "SearchResult", "TestCase-03");
                return false;
            }
            System.out.println("Yonex web element contain in the page");
        }

        logStatus("Step Success", "Successfully validated the search results ", "PASS");
        Thread.sleep(2000);

        // Search for product
        status = homePage.searchForProduct("Gesundheit");
        if (!status) {
            logStatus("TestCase 3", "Test Case Failure. Unable to search for given product", "FAIL");
            takeScreenshot(driver, "HomePage", "TestCase-03");
            return false;
        }

        // Verify no search results are found
        searchResults = homePage.getSearchResults();
        System.out.println(searchResults.size());
        
        // );
        if (searchResults.size() == 0) {
            takeScreenshot(driver, "HomePageSearchingGesundheit", "TestCase-03");
            if (homePage.isNoResultFound()) {
                logStatus("Step Success", "Successfully validated that no products found message is displayed", "PASS");
            }
            logStatus("TestCase 3", "Test Case PASS. Verified that no search results were found for the given text",
                    "PASS");

        } else {
            logStatus("TestCase 3", "Test Case Fail. Expected: no results , actual: Results were available", "FAIL");
            takeScreenshot(driver, "SearchResult", "TestCase-03");
            return false;
        }
        takeScreenshot(driver, "Ending", "TestCase-03");
         return true;
     }

    /*
     * Verify the presence of size chart and check if the size chart content is as
     * expected
     */
    public static Boolean TestCase04(RemoteWebDriver driver) throws InterruptedException {
        takeScreenshot(driver, "StartTestCase", "TestCase-04");
        logStatus("TestCase 4", "Start test case : Verify the presence of size Chart", "DONE");
        boolean status = false;

        // Visit home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        Thread.sleep(5000);

        // Search for product and get card content element of search results
        status = homePage.searchForProduct("Running Shoes");
        List<WebElement> searchResults = homePage.getSearchResults();

        // Create expected values
        List<String> expectedTableHeaders = Arrays.asList("Size", "UK/INDIA", "EU", "HEEL TO TOE");
        List<List<String>> expectedTableBody = Arrays.asList(Arrays.asList("6", "6", "40", "9.8"),
                Arrays.asList("7", "7", "41", "10.2"), Arrays.asList("8", "8", "42", "10.6"),
                Arrays.asList("9", "9", "43", "11"), Arrays.asList("10", "10", "44", "11.5"),
                Arrays.asList("11", "11", "45", "12.2"), Arrays.asList("12", "12", "46", "12.6"));

        // Verify size chart presence and content matching for each search result
        for (WebElement webElement : searchResults) {
            SearchResult result = new SearchResult(webElement);

            // Verify if the size chart exists for the search result
            if (result.verifySizeChartExists(driver)) {
                logStatus("Step Success", "Successfully validated presence of Size Chart Link", "PASS");

                // Verify if size dropdown exists
                status = result.verifyExistenceofSizeDropdown(driver);
                logStatus("Step Success", "Validated presence of drop down", status ? "PASS" : "FAIL");

                // Open the size chart
                if (result.openSizechart()) {
                    // Verify if the size chart contents matches the expected values
                    if (result.validateSizeChartContents(expectedTableHeaders, expectedTableBody, driver)) {
                        logStatus("Step Success", "Successfully validated contents of Size Chart Link", "PASS");
                    } else {
                        logStatus("Step Failure", "Failure while validating contents of Size Chart Link", "FAIL");
                        takeScreenshot(driver, "SearchResult", "TestCase-04");
                    }

                    // Close the size chart modal
                    status = result.closeSizeChart(driver);

                } else {
                    logStatus("TestCase 4", "Test Case Fail. Failure to open Size Chart", "FAIL");
                    takeScreenshot(driver, "SearchResult", "TestCase-04");
                    return false;
                }

            } else {
                logStatus("TestCase 4", "Test Case Fail. Size Chart Link does not exist", "FAIL");
                takeScreenshot(driver, "SearchResult", "TestCase-04");
                return false;
            }
        }
        logStatus("TestCase 4", "Test Case PASS. Validated Size Chart Details", "PASS");
        takeScreenshot(driver, "EndTestCase", "TestCase-04");
        return status;
    }

    /*
     * Verify the complete flow of checking out and placing order for products is
     * working correctly
     */
    public static Boolean TestCase05(RemoteWebDriver driver) throws InterruptedException {
        takeScreenshot(driver, "StartTestCase", "TestCase-05");
        Boolean status;
        logStatus("Start TestCase", "Test Case 5: Verify Happy Flow of buying products", "DONE");

        // Go to the Register page
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();

        // Register a new user
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("TestCase 5", "Test Case Failure. Happy Flow Test Failed", "FAIL");
            takeScreenshot(driver, "RegisterPage", "TestCase-05");
        }

        // Save the username of the newly registered user
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // Go to the login page
        Login login = new Login(driver);
        login.navigateToLoginPage();

        // Login with the newly registered user's credentials
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase", "Test Case 5: Happy Flow Test Failed : ", status ? "PASS" : "FAIL");
        }

        // Go to the home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        // Find required products by searching and add them to the user's cart
        status = homePage.searchForProduct("Yonex");
        homePage.addProductToCart("YONEX Smash Badminton Racquet");
        status = homePage.searchForProduct("Tan");
        homePage.addProductToCart("Tan Leatherette Weekender Duffle");
        Thread.sleep(10000);
        // Click on the checkout button
        homePage.clickCheckout("//*[@id='root']/div/div/div[3]/div[2]/div/div[4]/button");
        
        Thread.sleep(10000);

        // Add a new address on the Checkout page and select it
        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        Thread.sleep(500);
       
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");
        Thread.sleep(5000);

        // Place the order
        checkoutPage.placeOrder();
        // Thread.sleep(3000);
        WebDriverWait driverwait = new WebDriverWait(driver, 30);
        try {
            driverwait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[@id='root']/div/div[2]/h2")));
            System.out.println("Waiting till Thanks page open");
        } catch (Exception e) {
            //TODO: handle exception
            System.out.println("Exception will be thrown to load the page");
        }
            // WebElement element=driverwait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//div[@id='root']/div/div[2]/h1")));
        // if(element.isDisplayed()) {
        //     System.out.println("Waiting for 30 sec till Thanks page open");
        // } else {
        //     System.out.println("It's failing anywhere to load the page");
        // }

        WebElement placeOrderSure =driver.findElement(By.xpath("//*[@id='root']/div/div[2]/h2"));
        String checkplaceorder = placeOrderSure.getText();
        if(checkplaceorder.equals("Yay! It's ordered 😃")) {
            System.out.println("Successfully ordered.");
            
        }        // Check if placing order redirected to the Thansk page
        status = driver.getCurrentUrl().endsWith("/thanks");

        // Go to the home page
        homePage.navigateToHome();
        Thread.sleep(3000);

        // Log out the user
        homePage.PerformLogout();

        logStatus("End TestCase", "Test Case 5: Happy Flow Test Completed : ", status ? "PASS" : "FAIL");
        takeScreenshot(driver, "EndTestCase", "TestCase-05");
        return status;
    }

    /*
     * Verify the quantity of items in cart can be updated
     */
    public static Boolean TestCase06(RemoteWebDriver driver) throws InterruptedException {
        takeScreenshot(driver, "StartTestCase", "TestCase-06");
        Boolean status;
        logStatus("Start TestCase", "Test Case 6: Verify that cart can be edited", "DONE");
        Home homePage = new Home(driver);
        homePage.navigateToHome();
        Thread.sleep(1000);
        Register registration = new Register(driver);
        Login login = new Login(driver);

        // TODO: CRIO_TASK_MODULE_TEST_AUTOMATION - TEST CASE 06: MILESTONE 5

        // TODO: Register a new user
        registration.navigateToRegisterPage();
        registration.registerUser("User", "User@1234", true);

        // TODO: Login using the newly registed user
        login.PerformLogin(registration.lastGeneratedUsername, "User@1234");

        

        // TODO: Add "Xtend Smart Watch" to cart
        homePage.searchForProduct("Xtend");
        Thread.sleep(500);
        homePage.addProductToCart("Xtend Smart Watch");

        // TODO: Add "Yarine Floor Lamp" to cart
        homePage.searchForProduct("Yarine");
        Thread.sleep(500);
        homePage.addProductToCart("Yarine Floor Lamp");

        // update watch quantity to 2
        homePage.changeProductQuantityinCart("Xtend Smart Watch", 4);
        Thread.sleep(500);

        // update table lamp quantity to 0
        homePage.changeProductQuantityinCart("Yarine Floor Lamp", 0);
        Thread.sleep(500);

        // update watch quantity again to 1
        homePage.changeProductQuantityinCart("Xtend Smart Watch", 1);
        Thread.sleep(500);

        WebElement test = driver.findElement(By.xpath("//*[@id='root']/div/div/div[3]/div[2]/div/div[1]/div/div[2]/div[1]"));
        if (test.getText().contains("Xtend Smart Watch")) {
            logStatus("TestCase 6", "Test Case Pass. Are we reading the contents of the cart and ensuring it contains: " + test.getText(),
            "Pass");
        }
        List<WebElement> searchResults = homePage.getSearchResults();
        System.out.println(searchResults.size());

        // Verify the search results are available
        
        if (searchResults.size() == 0) {
            logStatus("TestCase 6", "Test Case Failure. There were no results for the given search string", "FAIL");
            takeScreenshot(driver, "HomePage", "TestCase-0");
            return false;
        }
        Thread.sleep(500);
        for (WebElement webElement : searchResults) {
            // Create a SearchResult object from the parent element
            SearchResult resultelement = new SearchResult(webElement);

            // Verify that all results contain the searched text
            String elementText = resultelement.getTitleofResult();
            System.out.println(elementText);
            Thread.sleep(500);
            if (elementText.contains("YONEX")) {
                logStatus("TestCase 6", "Test Case Pass. Test Results contains expected values: " + elementText,
                        "Pass");
                System.out.println("Now we have content like YONEX Smash Badminton Racquet on the page");
                return true;
            }
            System.out.println("Yonex web element contain in the page");
        }

        logStatus("Step Success", "Successfully validated the search results ", "PASS");

        homePage.clickCheckout("//*[@id='root']/div/div/div[3]/div[2]/div/div[3]/button");
        Thread.sleep(500);
        

        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        Thread.sleep(500);
        
       checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");
       Thread.sleep(500);

        checkoutPage.placeOrder();
        Thread.sleep(5000);
        status = driver.getCurrentUrl().endsWith("/thanks");
        logStatus("TestCase-6", "Test Case 6: Verify that thanks page url end with thanks: ", status ? "PASS" : "FAIL");
        homePage.navigateToHome();
        Thread.sleep(5000);
        homePage.PerformLogout();

        logStatus("End TestCase", "Test Case 6: Verify that cart can be edited: ", status ? "PASS" : "FAIL");
        takeScreenshot(driver, "EndTestCase", "TestCase-06");
        return status;
    }

    /*
     * Verify that the cart contents are persisted after logout
     */
    public static Boolean TestCase07(RemoteWebDriver driver) throws InterruptedException {
        takeScreenshot(driver, "StartTestCase", "TestCase-07");
        Boolean status = false;
        List<String> expectedResult = Arrays.asList("Stylecon 9 Seater RHS Sofa Set",
                "Xtend Smart Watch");

        logStatus("Start TestCase", "Test Case 7: Verify that cart contents are persisted after logout", "DONE");

        Register registration = new Register(driver);
        Login login = new Login(driver);
        Home homePage = new Home(driver);

        // TODO: CRIO_TASK_MODULE_TEST_AUTOMATION - TEST CASE 07: MILESTONE 6
        // TODO: Register a new user

        // TODO: Login using the newly created user

        homePage.navigateToHome();
        registration.navigateToRegisterPage();
        registration.registerUser("User", "User@1234", true);
        // login.navigateToLoginPage();
        login.PerformLogin(registration.lastGeneratedUsername, "User@1234");

        status = homePage.searchForProduct("Stylecon");
        homePage.addProductToCart("Stylecon 9 Seater RHS Sofa Set");
        Thread.sleep(500);

        status = homePage.searchForProduct("Xtend");
        homePage.addProductToCart("Xtend Smart Watch");
        Thread.sleep(500);

        homePage.PerformLogout();
        Thread.sleep(500);
        login.navigateToLoginPage();
        Thread.sleep(500);
        status = login.PerformLogin(registration.lastGeneratedUsername, "User@1234");
        Thread.sleep(5000);
        WebElement checkOutButton = driver.findElement(By.xpath("//*[@id='root']/div/div/div[3]/div[2]/div/div[4]/button"));

        String displayTextCheckOutButton = checkOutButton.getText();
        if(!displayTextCheckOutButton.toLowerCase().equals("checkout")) {
            System.out.println("not Existing the checkout button");
            return false;
        }
        System.out.println("Existing the checkout button");
        

        status = homePage.verifyCartContents(expectedResult);


        logStatus("End TestCase", "Test Case 7: Verify that cart contents are persisted after logout: ",
                status ? "PASS" : "FAIL");

        homePage.PerformLogout();
        takeScreenshot(driver, "EndTestCase", "TestCase-07");
        return status;
    }

    public static Boolean TestCase08(RemoteWebDriver driver) throws InterruptedException {
        takeScreenshot(driver, "StartTestCase", "TestCase-08");
        Boolean status;
        logStatus("Start TestCase",
                "Test Case 8: Verify that insufficient balance error is thrown when the wallet balance is not enough",
                "DONE");

        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("Step Failure", "User Perform Registration Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase",
                    "Test Case 8: Verify that insufficient balance error is thrown when the wallet balance is not enough: ",
                    status ? "PASS" : "FAIL");
            return false;
        }
        lastGeneratedUserName = registration.lastGeneratedUsername;

        Login login = new Login(driver);
        login.navigateToLoginPage();
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase",
                    "Test Case 8: Verify that insufficient balance error is thrown when the wallet balance is not enough: ",
                    status ? "PASS" : "FAIL");
            return false;
        }

        Home homePage = new Home(driver);
        homePage.navigateToHome();
        status = homePage.searchForProduct("Stylecon");
        homePage.addProductToCart("Stylecon 9 Seater RHS Sofa Set");
        Thread.sleep(3000);
        
        Boolean checkSofaSet = homePage.changeProductQuantityinCart("Stylecon 9 Seater RHS Sofa Set", 10);
        if(!checkSofaSet) {
            System.out.println("Unable to increase the plus icon");
            return false;
        }
        
        Boolean checkOutButton = homePage.clickCheckout("//*[@id='root']/div/div/div[3]/div[2]/div/div[3]/button");
        if(!checkOutButton) {
            System.out.println("Unable to click on the button");
            return false;
        }
        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");
        Thread.sleep(10000);

        checkoutPage.placeOrder();

        status = checkoutPage.verifyInsufficientBalanceMessage();

        logStatus("End TestCase",
                "Test Case 8: Verify that insufficient balance error is thrown when the wallet balance is not enough: ",
                status ? "PASS" : "FAIL");
        takeScreenshot(driver, "EndTestCase", "TestCase-08");
        return status;
    }
    
    public static Boolean TestCase09(RemoteWebDriver driver) throws InterruptedException {
        Boolean status;
        logStatus("Start TestCase", "Test Case 9: Verify User Registration", "DONE");
        // Visit the Registration page and register a new user
        //Register a new user on QKart
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);
        
        lastGeneratedUserName = registration.lastGeneratedUsername;

        Login login = new Login(driver);
        login.navigateToLoginPage();
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
       
        //visit the Qkart Home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        // Find required products by searching and add them to the user's cart
        status = homePage.searchForProduct("Yonex");
        status = homePage.addProductToCart("YONEX Smash Badminton Racquet");
        Thread.sleep(5000);
        
        ArrayList<String> tabs = new ArrayList<String> (driver.getWindowHandles());
        //Open up a new tab and navigate to the home page
        String parentWindow = driver.getWindowHandle();
        driver.switchTo().newWindow(WindowType.TAB);
        Thread.sleep(5000);
        homePage.navigateToHome();
        Thread.sleep(5000);
        //Check the contents of the cart
        homePage.getSearchResults();
        System.out.println("In the new tab, the cart should contain the added product: YONEX Smash Badminton Racquet");
       

        // driver.switchTo().window(tabs.get(0));
        // driver.close();
        // driver.switchTo().window(tabs.get(1));
        // Thread.sleep(7000);
        driver.close();
        driver.switchTo().window(parentWindow);
        homePage.PerformLogout();
        logStatus("End TestCase", "Test Case 9: Verify user Registration : ", status ? "PASS" : "FAIL");
        return true;
    }
    public static Boolean TestCase10(RemoteWebDriver driver) throws InterruptedException {
        Boolean status;
        Home home = new Home(driver);
        Thread.sleep(5000);
        home.navigateToHome();
        
        Thread.sleep(5000);
       
        //Click on the “Privacy Policy” page link in the footer of the page
        status = home.privacyPolicyLink();
        Thread.sleep(5000);
        //Switch to the newly opened tab
        ArrayList<String> tabs = new ArrayList<String> (driver.getWindowHandles());
        String parentWindow = driver.getWindowHandle();
        Set<String> windowSet1 = driver.getWindowHandles();
        String newTab1=null;
        // driver.switchTo().window(tabs.get(2));

        for(String window:windowSet1){
            if(parentWindow.equals(window)){
                
                boolean urlChange = parentWindow.equals(window);
                logStatus("Steps TestCase10","verify that current tab url remain same when new privacy_policy tab open", urlChange?"pass":"fail");
            }else{
                newTab1 = window;
                driver.switchTo().window(window);
                Thread.sleep(3000);

                status = home.privacyPolicyContent();
                
                logStatus("Steps TestCase10","verify that the privacy policy content is available on the newly opened tab", status?"pass":"fail"); 
            }
        }
        // System.out.println("Switch to the newly opened tab");
        // Thread.sleep(5000);
        // //Check if the privacy policy content is available on the newly opened tab
        // status = home.privacyPolicyContent();
        // Thread.sleep(5000);
        //Move back to the original tab (with QKart home page opened)
        driver.switchTo().window(parentWindow);
        Thread.sleep(3000);
        //Click on the “Terms Of Service” page link in the footer
        status = home.termsOfServiceLink();
        Thread.sleep(500);
        //Switch to the newly opened tab
        // driver.switchTo().window(tabs.get(2));
        // System.out.println("termsOfService Page should be open");
        // Thread.sleep(500);
        //Check if the about us content is displayed on the newly opened tab
       
        Set<String> windowSet2 = driver.getWindowHandles();
        String newTab2=null;
        for(String window:windowSet2){
            if(parentWindow.equals(window)){
                boolean urlChange = parentWindow.equals(window);
                logStatus("Steps TestCase10","verify that current tab url remain same when new Terms_of_Service tab open", urlChange?"pass":"fail");
            }else if(!window.equals(newTab1)){
                newTab2=window;
                driver.switchTo().window(window);
                Thread.sleep(3000);
                status = home.termsOfServiceContent();
                logStatus("Steps TestCase10","verify that the Terms of Service content is available on the newly opened tab", status?"pass":"fail"); 
                break;
            }
        }
        driver.switchTo().window(parentWindow);
        Thread.sleep(3000);
        WebElement aboutUsEle = driver.findElement(By.xpath("//*[@id='root']/div/div/div[5]/div[2]/p[2]/a"));
        
        aboutUsEle.click();
        
        Thread.sleep(3000);

        Set<String> windowsSet3 = driver.getWindowHandles();

        for(String window:windowsSet3){
            if(parentWindow.equals(window)){
                boolean urlChange = !parentWindow.equals(driver.getCurrentUrl());
                logStatus("Steps TestCase10","verify that current tab url remain same when new about_us tab open", urlChange?"pass":"fail");
            }else if(!(window.equals(newTab1)) && !(window.equals(newTab2))){       
                driver.switchTo().window(window);
                Thread.sleep(3000);
                status = home.aboutusContent();
                logStatus("Steps TestCase10","verify that the about us content is available on the newly opened tab", status?"pass":"fail"); 
                break;
            }
        }
        driver.switchTo().window(parentWindow);
        Thread.sleep(3000);

        Set<String> windowsSets = driver.getWindowHandles();
        for(String window:windowsSets){
            if(!parentWindow.equals(window)){
                driver.switchTo().window(window);
                driver.close();
                Thread.sleep(3000);
            }
        }
        driver.switchTo().window(parentWindow);
        status = true;
        logStatus("Steps TestCase10", "All newly opened tab closed and focus switched back to original tab", "pass");
        logStatus("End TestCase10","Verify Privacy Policy and Terms of Service", status?"pass":"fail");
        home.PerformLogout();
        return true;
    }
    public static Boolean TestCase11(RemoteWebDriver driver) throws InterruptedException {
        Boolean status;
        Home home = new Home(driver);
        Thread.sleep(5000);
        home.navigateToHome();
        Thread.sleep(5000);
        status =home.contactUs();
        logStatus("End TestCase", "Test Case 11: verify that the “Contact us” link works fine : ", status ? "PASS" : "FAIL");
        return true;
    }
    public static Boolean TestCase12(RemoteWebDriver driver) throws InterruptedException {
        Boolean status;
        //Register a new user on QKart
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);
        logStatus("Test Step", "User Registration : ", status ? "PASS" : "FAIL");
        // Save the last generated username
        lastGeneratedUserName = registration.lastGeneratedUsername;

        // Visit the login page and login with the previuosly registered user
        Login login = new Login(driver);
        login.navigateToLoginPage();
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        logStatus("Test Step", "User Perform Login: ", status ? "PASS" : "FAIL");
        //visit the Qkart Home page
        Home home = new Home(driver);
        home.navigateToHome();
        //Search for “YONEX Smash Badminton Racquet”
        home.searchForProduct("YONEX");
        Thread.sleep(500);
        //Add “YONEX Smash Badminton Racquet” to the cart
        home.addProductToCart("YONEX Smash Badminton Racquet");
        Thread.sleep(500);
        //Click on the Checkout button
        home.clickCheckout("//*[@id='root']/div/div/div[3]/div[2]/div/div[3]/button");
        Thread.sleep(500);
        Checkout checkoutPage = new Checkout(driver);
        //Add a new address and select it
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        Thread.sleep(500);
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");
        Thread.sleep(500);
        //Proceed to buy the product

        checkoutPage.placeOrder();
        Thread.sleep(500);

        WebDriverWait wait = new WebDriverWait(driver,30);
        wait.until(ExpectedConditions.urlContains("/thanks"));

       
        List<WebElement> frameProductAdvts = driver.findElements(By.tagName("iframe"));
        WebElement frameCoronaStatAdvt = driver.findElement(By.tagName("iFrame"));
        for(WebElement frameProductAdvt:frameProductAdvts){
            if(!frameProductAdvt.isDisplayed()){
                logStatus("Step failure","QKart product advt.frame are displayed", "fail");
                return false;
            }
        }
        if(!frameCoronaStatAdvt.isDisplayed()){
            logStatus("Step failure","Corona stat advt.frame is displayed", "fail");
            return false;
        }
        logStatus("Step 1st :  ","Total advts.(2 x QKART product and 1 x Corona stats) are displayed", "pass");

        int frameCount = 1;
        while(frameCount<3){
            wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt(By.xpath("//div[contains(@class,'css-92t6i8')]//iFrame['"+frameCount+"']")));
            WebElement button = driver.findElement(By.xpath("//div[@class='action_buttons']//button[1]"));
            
            int buttonCount = 1;
            while(buttonCount<=2){
                if(!button.isEnabled()){
                    logStatus("Step failure","Button "+buttonCount+" of frame " +frameCount+ " on QKart advt. is clickable", "fail");
                    return false;
                }
                button.click();
                Thread.sleep(3000);
                driver.navigate().back(); 
                logStatus("Step success","Button "+buttonCount+" of frame " +frameCount+ " on QKart advt. is clickable", "pass");
                buttonCount++;
                wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt(By.xpath("//div[contains(@class,'css-92t6i8')]//iFrame['"+frameCount+"']")));
                button = driver.findElement(By.xpath("//div[@class='action_buttons']//button[2]"));
                 
            }
               
            driver.switchTo().parentFrame();
            frameCount++;  
        }
        driver.switchTo().parentFrame();
        
        logStatus("Step 2nd :  ","QKART product buttons are clickable", "pass");
        status = true;
        logStatus("End TestCase12","Check for advertisements", status?"pass":"fail");
        home.PerformLogout();
        return status;

        //Ensure that a total of 2 advertisements are present
        // List<WebElement> frameEle1 = driver.findElements(By.xpath("//*[@id='root']/div/div[2]/div"));
        // System.out.println(frameEle1.size() + " advertisements are present");
       
        // Thread.sleep(500);
        // driver.switchTo().frame(0);
        // WebElement viewCart = driver.findElement(By.xpath("//*[@alt='Ipad Mini 64GB']/following-sibling::div//button[@id='continue-btn'][1]"));
        // if(viewCart.isDisplayed()) {
        //     viewCart.click();
        //     System.out.println("QKART product advertisements (view-Cart)are clickable");
        // }
        // Thread.sleep(500);
        // driver.navigate().back();
        // WebElement buyNow = driver.findElement(By.xpath("//*[@alt='Ipad Mini 64GB']/following-sibling::div//button[@id='continue-btn'][2]")); 
        // if(viewCart.isDisplayed()) {
        //     buyNow.click();
        //     System.out.println("QKART product advertisements (Buy-Now)are clickable");
        // }

    }

    public static void takeScreenshot(WebDriver driver, String screenshotType, String description) {
		try {
			File theDir = new File("/screenshots");
			if (!theDir.exists()) {
				theDir.mkdirs();
			}

			String timestamp = String.valueOf(java.time.LocalDateTime.now());
			String fileName = String.format("screenshot_%s_%s_%s.png", timestamp, screenshotType, description);

			TakesScreenshot scrShot = ((TakesScreenshot) driver);
			File SrcFile = scrShot.getScreenshotAs(OutputType.FILE);

			File DestFile = new File("screenshots/" + fileName);
			FileUtils.copyFile(SrcFile, DestFile);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}


    public static void main(String[] args) throws InterruptedException, MalformedURLException {
        int totalTests = 0;
        int passedTests = 0;
        Boolean status;
        // RemoteWebDriver driver = createDriver();
        // Maximize and Implicit Wait for things to initailize
        driver.manage().window().maximize();
        driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);

        try {
            // Execute Test Case 1
            totalTests += 1;
            status = TestCase01(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("TestCase Completed: " +totalTests);

            // Execute Test Case 2
            totalTests += 1;
            status = TestCase02(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("TestCase Completed: " +totalTests);

            // Execute Test Case 3
            totalTests += 1;
            status = TestCase03(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("TestCase Completed: " +totalTests);

            // Execute Test Case 4
            totalTests += 1;
            status = TestCase04(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("TestCase Completed: " +totalTests);

            // Execute Test Case 5
            totalTests += 1;
            status = TestCase05(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("TestCase Completed: " +totalTests);

            // Execute Test Case 6
            totalTests += 1;
            status = TestCase06(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("TestCase Completed: " +totalTests);

            // Execute Test Case 7
            totalTests += 1;
            status = TestCase07(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("TestCase Completed: " +totalTests);

            // Execute Test Case 8
            totalTests += 1;
            status = TestCase08(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("TestCase Completed: " +totalTests);


            // Execute Test Case 9
            totalTests += 1;
            status = TestCase09(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("TestCase Completed: " +totalTests);

            // Execute Test Case 10
            totalTests += 1;
            status = TestCase10(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("TestCase Completed: " +totalTests);

            // driver = createDriver();
            // Execute Test Case 11
            totalTests += 1;
            status = TestCase11(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("TestCase Completed: " +totalTests);

            // Execute Test Case 12
            totalTests += 1;
            status = TestCase12(driver);
            if (status) {
            passedTests += 1;
            }

            System.out.println("TestCase Completed: " +totalTests);


        } catch (Exception e) {
            throw e;
        } finally {
            // quit Chrome Driver
            driver.quit();

            System.out.println(String.format("%s out of %s test cases Passed ", Integer.toString(passedTests),
                    Integer.toString(totalTests)));
        }

    }
}